AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: cicd-lamba-falguni
        S3Key: lambda.zip
      Runtime: python3.9
      Timeout: 10

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-LambdaErrorAlarm"
      AlarmDescription: "Alarm if Lambda function throws errors"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmTopic
      TreatMissingData: notBreaching

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-AlarmTopic"

  AlarmTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: "falgunitagadkar@gmail.com"   # ðŸ‘ˆ Replace with your email
      Protocol: "email"
      TopicArn: !Ref AlarmTopic

  # DeploymentBucket: //Because I added lambda.zip file in the bucket I created manually,so no need to create bucket using cloudformation
  #   Type: AWS::S3::Bucket
